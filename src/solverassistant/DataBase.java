/*
 * TFG: Daniel Casanovas Gayoso 
 * Grau en Enginyeria Informàtica - Escola Politècnica Superior de Lleida
 * 2014/2015
 * DataBase Manager
 */
package solverassistant;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DataBase {

    private final String sDriver = "org.sqlite.JDBC";
    private final String sUrl = "jdbc:sqlite:";
    private String databaseName = null;
    private final int timeout = 30;
    private Connection conn = null;
    private Statement statement = null;

    // To use, use empty constructor and after call init function with the db name or use the second constructor with the db name
    // After that execute executeUp or executeQr
    public DataBase() {
    }

    public DataBase(String databaseName) throws Exception {
        init(databaseName);
    }

    public void init(String databaseName) throws Exception {
        setConnection();
        setStatement();
    }

    public String getDatabaseName() {
        return databaseName;
    }

    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    public void setConnection() throws Exception {
        Class.forName(sDriver);
        conn = DriverManager.getConnection(getCompleteUrl());
    }

    public String getCompleteUrl() {
        return sUrl + databaseName;
    }

    public Connection getConnection() {
        return conn;
    }

    public void setStatement() throws Exception {
        if (conn == null) {
            setConnection();
        }
        statement = conn.createStatement();
        statement.setQueryTimeout(timeout);  // set timeout to 30 sec.
    }

    public Statement getStatement() {
        return statement;
    }

    // Executes the SQL statement in this PreparedStatement object, which must be an SQL INSERT, UPDATE or DELETE statement; or an SQL statement that returns nothing, such as a DDL statement.
    public void executeUp(String instruction) throws SQLException {
        statement.executeUpdate(instruction);
    }

    // Execute executeUp function with a list of instructions to update
    public void executeUp(String[] instructionSet) throws SQLException {
        for (int i = 0; i < instructionSet.length; i++) {
            executeUp(instructionSet[i]);
        }
    }

    // Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
    public ResultSet executeQr(String instruction) throws SQLException {
        return statement.executeQuery(instruction);
    }

    public void closeConnection() {
        try {
            conn.close();
        } catch (Exception ignore) {
            System.err.println("[ERROR-INFO] - " + ignore);
        }
    }

}
